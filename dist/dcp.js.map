{"version":3,"sources":["../src/lib/dom.ts","../src/lib/template.ts","../src/lib/modify-template.ts","../src/lib/directive.ts","../src/lib/part.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/template-factory.ts","../src/lib/render.ts","../src/lib/default-template-processor.ts","src/lit-html.ts","../src/lib/shady-render.ts","../src/lib/updating-element.ts","../src/lib/decorators.ts","../src/lib/css-tag.ts","src/lit-element.ts","TopRow/TimeDisplay.ts","external/weatherIcons.ts","TopRow/WeatherDisplay.ts","TopRow/TopRow.ts","MiddleRow/MiddleRow.ts","BottomRow/TrackDisplay.ts","theme.ts","BottomRow/MediaControl.ts","../types/Module.ts","constants.ts","ImageButton.ts","BottomRow/ModuleSwitcher.ts","BottomRow/BottomRow.ts","Slider.ts","modules/LightControl/LightSlider.ts","modules/LightControl/LightControl.ts","modules/LightControl/LightControlModule.ts","modules/PCStats/PCStats.ts","modules/PCStats/PCStatsModule.ts","modules/TabletControl/TabletControlView.ts","modules/TabletControl/TabletControlModule.ts","modules/VolumeMixer/VolumeSlider.ts","modules/VolumeMixer/VolumeMixer.ts","modules/VolumeMixer/VolumeMixerModule.ts","../types/ModulesManager.ts","index.ts"],"names":[],"mappings":"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","file":"dcp.js","sourceRoot":"..\\src","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|\n    ((value: string|null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * Map of changed properties with old values. Takes an optional generic\n * interface corresponding to the declared element properties.\n */\n// tslint:disable-next-line:no-any\nexport type PropertyValues<T = any> =\n    keyof T extends PropertyKey ? Map<keyof T, unknown>: never;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    const descriptor = this.getPropertyDescriptor(name, key, options);\n    if (descriptor !== undefined) {\n      Object.defineProperty(this.prototype, name, descriptor);\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   */\n  protected static getPropertyDescriptor(\n      name: PropertyKey, key: string|symbol, options: PropertyDeclaration) {\n    return {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)\n            .requestUpdateInternal(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   */\n  protected static getPropertyOptions(name: PropertyKey) {\n    return this._classProperties && this._classProperties.get(name) ||\n        defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState!: UpdateState;\n  private _instanceProperties?: PropertyValues;\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private _updatePromise!: Promise<unknown>;\n  private _enableUpdatingResolver: (() => void)|undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._updateState = 0;\n    this._updatePromise =\n        new Promise((res) => this._enableUpdatingResolver = res);\n    this._changedProperties = new Map();\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdateInternal();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection.\n    this.enableUpdating();\n  }\n\n  protected enableUpdating() {\n    if (this._enableUpdatingResolver !== undefined) {\n      this._enableUpdatingResolver();\n      this._enableUpdatingResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const propName = (ctor._attributeToPropertyMap as AttributeMap).get(name);\n    if (propName !== undefined) {\n      const options = ctor.getPropertyOptions(propName);\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This protected version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  protected requestUpdateInternal(\n      name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      options = options || ctor.getPropertyOptions(name);\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._updatePromise = this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this.requestUpdateInternal(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this._updatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    const result = this.performUpdate();\n    // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this._hasRequestedUpdate;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this._hasRequestedUpdate) {\n      return;\n    }\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      } else {\n        this._markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n      throw e;\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected _getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n    this._markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the [[`internalProperty`]] decorator.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function internalProperty(options?: InternalPropertyDeclaration) {\n  return property({attribute: false, hasChanged: options?.hasChanged});\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n * once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    if (cache) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      descriptor.get = function(this: LitElement) {\n        if ((this as unknown as\n             {[key: string]: Element | null})[key as string] === undefined) {\n          ((this as unknown as {[key: string]: Element | null})[key as string] =\n               this.renderRoot.querySelector(selector));\n        }\n        return (\n            this as unknown as {[key: string]: Element | null})[key as string];\n      };\n    }\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      async get(this: LitElement) {\n        await this.updateComplete;\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n              (name !== undefined) ?\n              legacyEventOptions(options, protoOrDescriptor as Object, name) :\n              standardEventOptions(\n                  options, protoOrDescriptor as ClassElement)) as\n             // tslint:disable-next-line:no-any decorator\n             any;\n}\n\n// x-browser support for matches\n// tslint:disable-next-line:no-any\nconst ElementProto = Element.prototype as any;\nconst legacyMatches =\n    ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n * meaning any assigned nodes that are slot elements are replaced with their\n * assigned nodes.\n * @param selector A string which filters the results to elements that match\n * the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAssignedNodes(\n    slotName = '', flatten = false, selector = '') {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        const slotSelector =\n            `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;\n        const slot = this.renderRoot.querySelector(slotSelector);\n        let nodes = slot && (slot as HTMLSlotElement).assignedNodes({flatten});\n        if (nodes && selector) {\n          nodes = nodes.filter(\n              (node) => node.nodeType === Node.ELEMENT_NODE &&\n                      (node as Element).matches ?\n                  (node as Element).matches(selector) :\n                  legacyMatches.call(node as Element, selector));\n        }\n        return nodes;\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `supportsAdoptingStyleSheets` is true then we assume\n      // CSSStyleSheet is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {render, ShadyRenderOptions} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult, unsafeCSS} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.4.0');\n\nexport type CSSResultOrNative = CSSResult|CSSStyleSheet;\n\nexport interface CSSResultArray extends\n    Array<CSSResultOrNative|CSSResultArray> {}\n\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n\n  /**\n   * Reference to the underlying library method used to render the element's\n   * DOM. By default, points to the `render` method from lit-html's shady-render\n   * module.\n   *\n   * **Most users will never need to touch this property.**\n   *\n   * This  property should not be confused with the `render` instance method,\n   * which should be overridden to define a template for the element.\n   *\n   * Advanced users creating a new base class based on LitElement can override\n   * this property to point to a custom render method with a signature that\n   * matches [shady-render's `render`\n   * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n   *\n   * @nocollapse\n   */\n  static render:\n      (result: unknown, container: Element|DocumentFragment,\n       options: ShadyRenderOptions) => void = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the [[`css`]] tag function or via constructible stylesheets.\n   */\n  static styles?: CSSResultOrNative|CSSResultArray;\n\n  private static _styles: Array<CSSResultOrNative|CSSResult>|undefined;\n\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles(): CSSResultOrNative|CSSResultArray|undefined {\n    return this.styles;\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    }\n    // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.getStyles();\n\n    if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles = (styles: CSSResultArray, set: Set<CSSResultOrNative>):\n          Set<CSSResultOrNative> => styles.reduceRight(\n              (set: Set<CSSResultOrNative>, s) =>\n                  // Note: On IE set.add() does not return the set\n              Array.isArray(s) ? addStyles(s, set) : (set.add(s), set),\n              set);\n      // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n      const set = addStyles(userStyles, new Set<CSSResultOrNative>());\n      const styles: CSSResultOrNative[] = [];\n      set.forEach((v) => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = userStyles === undefined ? [] : [userStyles];\n    }\n\n    // Ensure that there are no invalid CSSStyleSheet instances here. They are\n    // invalid in two conditions.\n    // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n    //     this is impossible to check except via .replaceSync or use\n    // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n    //     false)\n    this._styles = this._styles.map((s) => {\n      if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n        // Flatten the cssText from the passed constructible stylesheet (or\n        // undetectable non-constructible stylesheet). The user might have\n        // expected to update their stylesheets over time, but the alternative\n        // is a crash.\n        const cssText = Array.prototype.slice.call(s.cssRules)\n                            .reduce((css, rule) => css + rule.cssText, '');\n        return unsafeCSS(cssText);\n      }\n      return s;\n    });\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls\n   * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n   * captures any pre-set values for registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this.constructor as typeof LitElement)._getUniqueStyles();\n    (this as {\n      renderRoot: Element|DocumentFragment;\n    }).renderRoot = this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the [[`styles`]]\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties);\n    // If render is not implemented by the component, don't call lit-html render\n    if (templateResult !== renderNotImplemented) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `NodePart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   */\n  protected render(): unknown {\n    return renderNotImplemented;\n  }\n}\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\n\r\nfunction formatTime(now: Date): string {\r\n  let hours = now.getHours();\r\n  const minutes = now.getMinutes();\r\n  const ampm = hours >= 12 ? 'PM' : 'AM';\r\n  hours %= 12;\r\n  hours = hours || 12; // the hour 0 should be '12'\r\n  const minutesStr = minutes < 10 ? `0${minutes}` : minutes;\r\n\r\n  return `${hours}:${minutesStr} ${ampm}`;\r\n}\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class TimeDisplay extends LitElement {\r\n  //   @property({type: Object }) public hass: Hass;\r\n  @property({ type: Date }) public date: Date;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.date = new Date();\r\n    setInterval(() => {\r\n      this.date = new Date();\r\n    }, 1000);\r\n  }\r\n\r\n  protected render(): TemplateResult {\r\n    return html`\r\n      <div id=\"time-container\">\r\n        <div id=\"time\">\r\n          ${formatTime(this.date)}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #time-container {\r\n        display: flex;\r\n        justify-content: center;\r\n      }\r\n      #time {\r\n        display: flex;\r\n        justify-content: center;\r\n        width: 66%;\r\n        border: 1px solid #00C8C8;\r\n        border-radius: 15px;\r\n        padding: 5px;\r\n        margin-top: -8px;\r\n        color: #00C8C8;\r\n        font-size: 30px;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('time-display')) {\r\n  customElements.define('time-display', TimeDisplay);\r\n}\r\n","/* eslint-disable no-nested-ternary */\r\n// Directly copied from home assistant-frontend/src/data/weather.ts\r\nimport { css, svg, SVGTemplateResult } from 'lit-element';\r\n\r\nexport const weatherSVGStyles = css`\r\n  .rain {\r\n    fill: var(--weather-icon-rain-color, #30b3ff);\r\n  }\r\n  .sun {\r\n    fill: var(--weather-icon-sun-color, #fdd93c);\r\n  }\r\n  .moon {\r\n    fill: var(--weather-icon-moon-color, #fcf497);\r\n  }\r\n  .cloud-back {\r\n    fill: var(--weather-icon-cloud-back-color, #d4d4d4);\r\n  }\r\n  .cloud-front {\r\n    fill: var(--weather-icon-cloud-front-color, #f9f9f9);\r\n  }\r\n`;\r\n\r\nconst cloudyStates = new Set<string>([\r\n  'partlycloudy',\r\n  'cloudy',\r\n  'fog',\r\n  'windy',\r\n  'windy-variant',\r\n  'hail',\r\n  'rainy',\r\n  'snowy',\r\n  'snowy-rainy',\r\n  'pouring',\r\n  'lightning',\r\n  'lightning-rainy',\r\n]);\r\n\r\nconst rainStates = new Set<string>(['hail', 'rainy', 'pouring']);\r\n\r\nconst windyStates = new Set<string>(['windy', 'windy-variant']);\r\n\r\nconst snowyStates = new Set<string>(['snowy', 'snowy-rainy']);\r\n\r\nconst lightningStates = new Set<string>(['lightning', 'lightning-rainy']);\r\n\r\nconst getWeatherStateSVG = (\r\n  state: string,\r\n  nightTime?: boolean,\r\n): SVGTemplateResult => (\r\n  svg`\r\n  <svg\r\n    xmlns='http://www.w3.org/2000/svg'\r\n    viewBox='0 0 17 17'\r\n  >\r\n  ${state === 'sunny'\r\n    ? svg`\r\n        <path\r\n          class='sun'\r\n          d='m 14.39303,8.4033507 c 0,3.3114723 -2.684145,5.9956173 -5.9956169,5.9956173 -3.3114716,0 -5.9956168,-2.684145 -5.9956168,-5.9956173 0,-3.311471 2.6841452,-5.995617 5.9956168,-5.995617 3.3114719,0 5.9956169,2.684146 5.9956169,5.995617'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  ${state === 'clear-night'\r\n    ? svg`\r\n        <path\r\n          class='moon'\r\n          d='m 13.502891,11.382935 c -1.011285,1.859223 -2.976664,3.121381 -5.2405751,3.121381 -3.289929,0 -5.953329,-2.663833 -5.953329,-5.9537625 0,-2.263911 1.261724,-4.228856 3.120948,-5.240575 -0.452782,0.842738 -0.712753,1.806363 -0.712753,2.832381 0,3.289928 2.663833,5.9533275 5.9533291,5.9533275 1.026017,0 1.989641,-0.259969 2.83238,-0.712752'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  ${state === 'partlycloudy' && nightTime\r\n    ? svg`\r\n        <path\r\n          class='moon'\r\n          d='m14.981 4.2112c0 1.9244-1.56 3.4844-3.484 3.4844-1.9244 0-3.4844-1.56-3.4844-3.4844s1.56-3.484 3.4844-3.484c1.924 0 3.484 1.5596 3.484 3.484'\r\n        />\r\n      `\r\n    : state === 'partlycloudy'\r\n      ? svg`\r\n        <path\r\n          class='sun'\r\n          d='m14.981 4.2112c0 1.9244-1.56 3.4844-3.484 3.4844-1.9244 0-3.4844-1.56-3.4844-3.4844s1.56-3.484 3.4844-3.484c1.924 0 3.484 1.5596 3.484 3.484'\r\n        />\r\n      `\r\n      : ''\r\n  }\r\n  ${cloudyStates.has(state)\r\n    ? svg`\r\n        <path\r\n          class='cloud-back'\r\n          d='m3.8863 5.035c-0.54892 0.16898-1.04 0.46637-1.4372 0.8636-0.63077 0.63041-1.0206 1.4933-1.0206 2.455 0 1.9251 1.5589 3.4682 3.4837 3.4682h6.9688c1.9251 0 3.484-1.5981 3.484-3.5232 0-1.9251-1.5589-3.5232-3.484-3.5232h-1.0834c-0.25294-1.6916-1.6986-2.9083-3.4463-2.9083-1.7995 0-3.2805 1.4153-3.465 3.1679'\r\n        />\r\n        <path\r\n          class='cloud-front'\r\n          d='m4.1996 7.6995c-0.33902 0.10407-0.64276 0.28787-0.88794 0.5334-0.39017 0.38982-0.63147 0.92322-0.63147 1.5176 0 1.1896 0.96414 2.1431 2.1537 2.1431h4.3071c1.1896 0 2.153-0.98742 2.153-2.1777 0-1.1896-0.96344-2.1777-2.153-2.1777h-0.66992c-0.15593-1.0449-1.0499-1.7974-2.1297-1.7974-1.112 0-2.0274 0.87524-2.1417 1.9586'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  ${rainStates.has(state)\r\n    ? svg`\r\n        <path\r\n          class='rain'\r\n          d='m5.2852 14.734c-0.22401 0.24765-0.57115 0.2988-0.77505 0.11395-0.20391-0.1845-0.18732-0.53481 0.036689-0.78281 0.14817-0.16298 0.59126-0.32914 0.87559-0.42369 0.12453-0.04092 0.22684 0.05186 0.19791 0.17956-0.065617 0.2921-0.18732 0.74965-0.33514 0.91299'\r\n        />\r\n        <path\r\n          class='rain'\r\n          d='m11.257 14.163c-0.22437 0.24765-0.57115 0.2988-0.77505 0.11395-0.2039-0.1845-0.18768-0.53481 0.03669-0.78281 0.14817-0.16298 0.59126-0.32914 0.8756-0.42369 0.12453-0.04092 0.22684 0.05186 0.19791 0.17956-0.06562 0.2921-0.18732 0.74965-0.33514 0.91299'\r\n        />\r\n        <path\r\n          class='rain'\r\n          d='m8.432 15.878c-0.15452 0.17039-0.3937 0.20567-0.53446 0.07867-0.14041-0.12735-0.12876-0.36865 0.025753-0.53975 0.10195-0.11218 0.40711-0.22684 0.60325-0.29175 0.085725-0.02858 0.15628 0.03563 0.13652 0.12382-0.045508 0.20108-0.12912 0.51647-0.23107 0.629'\r\n        />\r\n        <path\r\n          class='rain'\r\n          d='m7.9991 14.118c-0.19226 0.21237-0.49001 0.25612-0.66499 0.09737-0.17462-0.15804-0.16051-0.45861 0.03175-0.67098 0.12665-0.14005 0.50729-0.28293 0.75071-0.36336 0.10689-0.03563 0.19473 0.0441 0.17004 0.15346-0.056092 0.25082-0.16051 0.64347-0.28751 0.78352'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  ${state === 'pouring'\r\n    ? svg`\r\n        <path\r\n          class='rain'\r\n          d='m10.648 16.448c-0.19226 0.21449-0.49001 0.25894-0.66499 0.09878-0.17498-0.16016-0.16087-0.4639 0.03175-0.67874 0.12665-0.14146 0.50694-0.2854 0.75071-0.36724 0.10689-0.03563 0.19473 0.0448 0.17004 0.15558-0.05645 0.25365-0.16051 0.65017-0.28751 0.79163'\r\n        />\r\n        <path\r\n          class='rain'\r\n          d='m5.9383 16.658c-0.22437 0.25012-0.5715 0.30162-0.77505 0.11501-0.20391-0.18627-0.18768-0.54046 0.036689-0.79093 0.14817-0.1651 0.59126-0.33267 0.87559-0.42827 0.12418-0.04127 0.22648 0.05221 0.19791 0.18168-0.065617 0.29528-0.18732 0.75741-0.33514 0.92251'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  ${windyStates.has(state)\r\n    ? svg`\r\n        <path\r\n          class='cloud-back'\r\n          d='m 13.59616,15.30968 c 0,0 -0.09137,-0.0071 -0.250472,-0.0187 -0.158045,-0.01235 -0.381353,-0.02893 -0.64382,-0.05715 -0.262466,-0.02716 -0.564444,-0.06385 -0.877358,-0.124531 -0.156986,-0.03034 -0.315383,-0.06844 -0.473781,-0.111478 -0.157691,-0.04551 -0.313266,-0.09842 -0.463902,-0.161219 l -0.267406,-0.0949 c -0.09984,-0.02646 -0.205669,-0.04904 -0.305153,-0.06738 -0.193322,-0.02716 -0.3838218,-0.03316 -0.5640912,-0.02011 -0.3626556,0.02611 -0.6847417,0.119239 -0.94615,0.226483 -0.2617611,0.108656 -0.4642556,0.230364 -0.600075,0.324203 -0.1358195,0.09419 -0.2049639,0.160514 -0.2049639,0.160514 0,0 0.089958,-0.01623 0.24765,-0.04445 0.1559278,-0.02575 0.3764139,-0.06174 0.6367639,-0.08714 0.2596444,-0.02646 0.5591527,-0.0441 0.8678333,-0.02328 0.076905,0.0035 0.1538111,0.01658 0.2321278,0.02293 0.077611,0.01058 0.1534581,0.02893 0.2314221,0.04022 0.07267,0.01834 0.1397,0.03986 0.213078,0.05644 l 0.238125,0.08925 c 0.09207,0.03281 0.183444,0.07055 0.275872,0.09878 0.09243,0.0261 0.185208,0.05327 0.277636,0.07161 0.184856,0.0388 0.367947,0.06174 0.543983,0.0702 0.353131,0.01905 0.678745,-0.01341 0.951442,-0.06456 0.27305,-0.05292 0.494595,-0.123119 0.646642,-0.181681 0.152047,-0.05785 0.234597,-0.104069 0.234597,-0.104069'\r\n        />\r\n        <path\r\n          class='cloud-back'\r\n          d='m 4.7519154,13.905801 c 0,0 0.091369,-0.0032 0.2511778,-0.0092 0.1580444,-0.0064 0.3820583,-0.01446 0.6455833,-0.03281 0.2631722,-0.01729 0.5662083,-0.04269 0.8812389,-0.09137 0.1576916,-0.02434 0.3175,-0.05609 0.4776611,-0.09384 0.1591027,-0.03951 0.3167944,-0.08643 0.4699,-0.14358 l 0.2702277,-0.08467 c 0.1008945,-0.02222 0.2074334,-0.04127 0.3072695,-0.05574 0.1943805,-0.01976 0.3848805,-0.0187 0.5651499,0.0014 0.3608917,0.03951 0.67945,0.144639 0.936625,0.261761 0.2575278,0.118534 0.4554364,0.247297 0.5873754,0.346781 0.132291,0.09913 0.198966,0.168275 0.198966,0.168275 0,0 -0.08925,-0.01976 -0.245886,-0.05397 C 9.9423347,14.087088 9.7232597,14.042988 9.4639681,14.00736 9.2057347,13.97173 8.9072848,13.94245 8.5978986,13.95162 c -0.077258,7.06e-4 -0.1541638,0.01058 -0.2328333,0.01411 -0.077964,0.0078 -0.1545166,0.02328 -0.2331861,0.03175 -0.073025,0.01588 -0.1404055,0.03422 -0.2141361,0.04798 l -0.2420055,0.08008 c -0.093486,0.02963 -0.1859139,0.06421 -0.2794,0.0889 C 7.3028516,14.23666 7.2093653,14.2603 7.116232,14.27512 6.9303181,14.30722 6.7465209,14.3231 6.5697792,14.32486 6.2166487,14.33046 5.8924459,14.28605 5.6218654,14.224318 5.3505793,14.161565 5.1318571,14.082895 4.9822793,14.01869 4.8327015,13.95519 4.7519154,13.905801 4.7519154,13.905801'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  ${snowyStates.has(state)\r\n    ? svg`\r\n        <path\r\n          class='rain'\r\n          d='m 8.4319893,15.348341 c 0,0.257881 -0.209197,0.467079 -0.467078,0.467079 -0.258586,0 -0.46743,-0.209198 -0.46743,-0.467079 0,-0.258233 0.208844,-0.467431 0.46743,-0.467431 0.257881,0 0.467078,0.209198 0.467078,0.467431'\r\n        />\r\n        <path\r\n          class='rain'\r\n          d='m 11.263878,14.358553 c 0,0.364067 -0.295275,0.659694 -0.659695,0.659694 -0.364419,0 -0.6596937,-0.295627 -0.6596937,-0.659694 0,-0.364419 0.2952747,-0.659694 0.6596937,-0.659694 0.36442,0 0.659695,0.295275 0.659695,0.659694'\r\n        />\r\n        <path\r\n          class='rain'\r\n          d='m 5.3252173,13.69847 c 0,0.364419 -0.295275,0.660047 -0.659695,0.660047 -0.364067,0 -0.659694,-0.295628 -0.659694,-0.660047 0,-0.364067 0.295627,-0.659694 0.659694,-0.659694 0.36442,0 0.659695,0.295627 0.659695,0.659694'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  ${lightningStates.has(state)\r\n    ? svg`\r\n        <path\r\n          class='sun'\r\n          d='m 9.9252695,10.935875 -1.6483986,2.341014 1.1170184,0.05929 -1.2169864,2.02141 3.0450261,-2.616159 H 9.8864918 L 10.97937,11.294651 10.700323,10.79794 h -0.508706 l -0.2663475,0.137936'\r\n        />\r\n      `\r\n    : ''\r\n  }\r\n  </svg>`\r\n);\r\n\r\nexport default getWeatherStateSVG;\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport DCPConfig from '../../types/Config';\r\nimport { HomeAssistant } from '../../types/types';\r\nimport getWeatherStateSVG, { weatherSVGStyles } from '../external/weatherIcons';\r\n\r\nfunction getWeatherText(hass: HomeAssistant, weatherState: string): string {\r\n  const localizeUrl = `component.weather.state._.${weatherState}`;\r\n  return hass.localize(localizeUrl) ?? 'unknown';\r\n}\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class WeatherDisplay extends LitElement {\r\n  @property({ type: Object }) public hass: HomeAssistant;\r\n  @property({ type: Object }) public config: DCPConfig;\r\n\r\n  protected render(): TemplateResult {\r\n    if (!this.config.weather_name || !this.hass.states[this.config.weather_name]) {\r\n      return html`\r\n        <div class=\"unavailable-text\">\r\n          Unavailable\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    const { state, attributes } = this.hass.states[this.config.weather_name];\r\n    const weatherType = getWeatherText(this.hass, state);\r\n    const temperature: number = attributes.temperature ?? -1;\r\n\r\n    return html`\r\n      <div class=\"weather-container\">\r\n        <div class=\"weather-icon\">\r\n            ${getWeatherStateSVG(state)}\r\n        </div>\r\n        <div class=\"temperature-weather-container\">\r\n          <span id=\"temperature\">\r\n            ${temperature.toFixed(0)}°F\r\n          </span>\r\n          <span>\r\n            ${weatherType}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult[] {\r\n    return [\r\n      weatherSVGStyles,\r\n      css`\r\n      .weather-container {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n        color: #00C8C8;\r\n        height: 100%;\r\n        padding: 0px 5px 5px 5px;\r\n      }\r\n\r\n      .weather-icon {\r\n        font-size: 40px;\r\n        display: flex;\r\n        align-items: flex-end;\r\n        min-width: 48px;\r\n      }\r\n\r\n      .weather-icon > * {\r\n        flex: 0 0 48px;\r\n      }\r\n\r\n      .temperature-weather-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        text-align: right;\r\n      }\r\n\r\n      #temperature {\r\n        font-size: 28px;\r\n      }\r\n\r\n      .unavailable-text {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n      }\r\n    `];\r\n  }\r\n}\r\n\r\nif (!customElements.get('weather-display')) {\r\n  customElements.define('weather-display', WeatherDisplay);\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport DCPConfig from '../../types/Config';\r\nimport { HomeAssistant } from '../../types/types';\r\nimport './TimeDisplay';\r\nimport './WeatherDisplay';\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class TopRow extends LitElement {\r\n  @property({ type: Object }) public hass: HomeAssistant;\r\n  @property({ type: Object }) public config: DCPConfig;\r\n\r\n  protected render(): TemplateResult {\r\n    return html`\r\n      <div id=\"top-row\">\r\n        <div>PC Controls</div>\r\n        <time-display></time-display>\r\n        <weather-display .hass=${this.hass} .config=${this.config}></weather-display>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #top-row {\r\n        display: grid;\r\n        grid-template-columns: 33% 33% 33%;\r\n        grid-template-rows: 100%;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-top: 4px;\r\n\r\n        height: calc(100% - 4px);\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('top-row')) {\r\n  customElements.define('top-row', TopRow);\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport DCPConfig from '../../types/Config';\r\nimport Module from '../../types/Module';\r\nimport { HomeAssistant } from '../../types/types';\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class MiddleRow extends LitElement {\r\n  @property({ type: Object }) public hass: HomeAssistant;\r\n  @property({ type: Object}) public config: DCPConfig;\r\n  @property({ type: Object }) public currentModule: Module;\r\n\r\n  protected render(): TemplateResult {\r\n    return html`\r\n      <div id=\"middle-row\">\r\n        ${this.currentModule ? this.currentModule.component(this.hass, this.config) : 'No modules enabled'}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #middle-row {\r\n        width: 100%;\r\n        height: 100%;\r\n        border: 1px solid #00C8C8;\r\n        overflow-y: hidden;\r\n        flex-grow: 1;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('middle-row')) {\r\n  customElements.define('middle-row', MiddleRow);\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport Song from '../../types/Song';\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class TrackDisplay extends LitElement {\r\n  @property({ type: Object }) public song: Song;\r\n\r\n  protected render(): TemplateResult {\r\n    return html`\r\n      <div id=\"track\">\r\n          <img\r\n            id=\"album-cover\"\r\n            src=${this.song.albumArt} \r\n            alt=\"album-cover\"\r\n          ></img>\r\n        <div id=\"track-info\">\r\n          <span id=\"current-track\">\r\n            ${this.song.title}\r\n          </span>\r\n          <span id=\"current-artist\">\r\n            ${this.song.artistName}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #track {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: flex-end;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n      #album-cover-container {\r\n      }\r\n      #album-cover {\r\n        object-fit: contain;\r\n        max-height: 64px;\r\n      }\r\n\r\n      #track-info {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-left: 5px;\r\n        /* 48px is for the image, 5px is for left margin */\r\n        width: calc(100% - 48px - 5px);\r\n      }\r\n      #current-track {\r\n        font-size: 16px;\r\n        margin-bottom: 4px;\r\n      }\r\n\r\n      #current-artist {\r\n        font-size: 13px;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('track-display')) {\r\n  customElements.define('track-display', TrackDisplay);\r\n}\r\n","import { css } from 'lit-element';\r\n\r\nconst themeColor = css`\r\n  div {\r\n    --theme-color: rgb(0, 200, 200);\r\n  }\r\n`;\r\n\r\nexport default themeColor;\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport { HomeAssistant } from '../../types/types';\r\nimport Song from '../../types/Song';\r\n\r\nimport themeColor from '../theme';\r\n\r\n/**\r\n * Calls the according Spotify service using hass.callService\r\n * @param hass HomeAssistant instance\r\n * @param mediaPlayerId The entity ID , e.g. media_player.spotify_first_last\r\n * @param type Either media_previous_track, media_play_pause, or media_next_track\r\n */\r\nexport function callSpotifyService(hass: HomeAssistant, mediaPlayerId: string, type: string): void {\r\n  hass.callService('media_player', type, { entity_id: mediaPlayerId }).catch((err) => {\r\n    console.log(err);\r\n  });\r\n}\r\n\r\nexport default class MediaControl extends LitElement {\r\n  @property({ type: Object }) public hass: HomeAssistant;\r\n  @property({ type: Object }) public song: Song;\r\n  @property({ type: String }) public mediaPlayerId: string;\r\n\r\n  previousClicked(): void {\r\n    callSpotifyService(this.hass, this.mediaPlayerId, 'media_previous_track');\r\n  }\r\n\r\n  playPauseClicked(): void {\r\n    callSpotifyService(this.hass, this.mediaPlayerId, 'media_play_pause');\r\n  }\r\n\r\n  nextClicked(): void {\r\n    callSpotifyService(this.hass, this.mediaPlayerId, 'media_next_track');\r\n  }\r\n\r\n  protected render(): TemplateResult {\r\n    const playPauseIcon = this.song.isPlaying\r\n      ? 'mdi:pause-circle-outline' : 'mdi:play-circle-outline';\r\n\r\n    return html`\r\n      <div id=\"spotify-playback\">\r\n        <div id=\"playback-container\">\r\n          <ha-icon-button\r\n            @click=${this.previousClicked}\r\n            icon=\"mdi:skip-previous\"\r\n            class=\"icon-button skip-button\"\r\n          >\r\n          </ha-icon-button>\r\n          <ha-icon-button\r\n            @click=${this.playPauseClicked}\r\n            icon=${playPauseIcon}\r\n            class=\"icon-button\"\r\n          >\r\n          </ha-icon-button>\r\n          <ha-icon-button\r\n            @click=${this.nextClicked}\r\n            icon=\"mdi:skip-next\"\r\n            class=\"icon-button skip-button\"\r\n          >\r\n          </ha-icon-button>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult[] {\r\n    const styles = css`\r\n      #spotify-playback {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n        height: 100%;\r\n      }\r\n\r\n      #playback-container {\r\n        border: 1px solid var(--theme-color) !important;\r\n        border-radius: 20px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 250px;\r\n        height: 100%;\r\n      }\r\n\r\n      .icon-button {\r\n        --mdc-icon-size: 56px;\r\n        --mdc-icon-button-size: 60px;\r\n        /* 8 is mostly arbitrary - but it's 56 - 48 px */\r\n        color: var(--theme-color);\r\n      }\r\n\r\n      /* Skip buttons have more empty space than pause, so reduce their size to match the\r\n         icon size */\r\n      .skip-button {\r\n        --mdc-icon-button-size: 56px;\r\n      }\r\n    `;\r\n\r\n    return [themeColor, styles];\r\n  }\r\n}\r\n\r\nif (!customElements.get('media-control')) {\r\n  customElements.define('media-control', MediaControl);\r\n}\r\n","import { TemplateResult } from 'lit-element';\r\nimport DCPConfig from './Config';\r\nimport { HomeAssistant } from './types';\r\n\r\nexport default interface Module {\r\n  icon: string;\r\n  name: string;\r\n  component: (hass: HomeAssistant, config: DCPConfig) => TemplateResult;\r\n  active: boolean; // If it's currently active (and should be shown as an option)\r\n};\r\n\r\nexport const updateCurrentModuleEventName = 'update-current-module';\r\n","const PANEL_NAME = 'desktop-control';\r\nexport const ROOT_URL = '/local/community/Desktop-Control-Panel';\r\n\r\nexport default PANEL_NAME;\r\n","import {\r\n  css, html, TemplateResult,\r\n} from 'lit-element';\r\nimport { ROOT_URL } from './constants';\r\n\r\n/**\r\n * Creates an image button. Isn't a custom element because how LitElement handles shadow-dom's / and\r\n * prevents us from passing and ID to the img from the host component that's using it.\r\n * @param onClick Function to be called when the button is pressed\r\n * @param icon image name\r\n * @param imgId the id to be applied to the img element\r\n */\r\nexport default function createImageButton(\r\n  onClick: () => void, icon: string, imgId: string,\r\n): TemplateResult {\r\n  const styles = css`\r\n    .image-button {\r\n      border: initial;\r\n      outline: none;\r\n      background-color: initial;\r\n      align-items: initial;\r\n      display: initial;\r\n      box-sizing: initial;\r\n    }\r\n\r\n    .image-button:active {\r\n      transform: scale(0.8);\r\n      filter: grayscale(0.8);\r\n    }\r\n  `;\r\n\r\n  return html`\r\n    <style>\r\n      ${styles}\r\n    </style>\r\n    <button type=\"button\" @click=${onClick} class=\"image-button\">\r\n      <img src=${`${ROOT_URL}/${icon}`} alt=${imgId} id=${imgId}></img>\r\n    </button> \r\n  `;\r\n}\r\n\r\n/**\r\n * Creates an image button. Isn't a custom element because how LitElement handles shadow-dom's / and\r\n * prevents us from passing and ID to the img from the host component that's using it.\r\n * @param onClick Function to be called when the button is pressed\r\n * @param icon mdi icon name, with the mdi: prefix\r\n * @param imgClass the class to be applied to the element\r\n */\r\nexport function createIconButton(\r\n  onClick: () => void, icon: string, imgClass: string,\r\n): TemplateResult {\r\n  return html`\r\n    <ha-icon-button @click=${onClick} class=${imgClass} icon=${icon}>\r\n    </ha-icon-button>\r\n  `;\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport Module, { updateCurrentModuleEventName } from '../../types/Module';\r\nimport createImageButton from '../ImageButton';\r\n\r\nexport default class ModuleSwitcher extends LitElement {\r\n  @property({ type: Array }) public modules: Module[];\r\n  @property({ type: Object }) public currentModule: Module;\r\n\r\n  private updateCurrentModule(module: Module): void {\r\n    const event = new CustomEvent(updateCurrentModuleEventName, {\r\n      // Make the event pass through shadow DOM boundaries\r\n      detail: { module },\r\n      bubbles: true,\r\n      composed: true,\r\n    });\r\n\r\n    this.dispatchEvent(event);\r\n  }\r\n\r\n  protected render(): TemplateResult {\r\n    const moduleButtons = this.modules.map((mod) => {\r\n      const button = createImageButton(() => {\r\n        this.updateCurrentModule(mod);\r\n      }, mod.icon, 'toggle-button');\r\n\r\n      return html`\r\n        <div class=\"button-container\">\r\n          ${button}\r\n        </div> \r\n      `;\r\n    });\r\n\r\n    return html`\r\n      <div id=\"module-swapper\">\r\n        <div id=\"control-container\">\r\n          ${moduleButtons}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #module-swapper {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        align-items: flex-end;\r\n        width: 100%;\r\n      }\r\n\r\n      #control-container {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        border: 1px solid #00C8C8;\r\n        border-radius: 20px;\r\n        min-width: 200px;\r\n        height: 100%;\r\n      }\r\n\r\n      /* Add greater gaps between buttons to force container to grow */\r\n      .button-container {\r\n        padding: 0 4px;\r\n      }\r\n      \r\n      #toggle-button {\r\n        width: 32px;\r\n        height: 32px;\r\n        margin: 16px 0;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('module-switcher')) {\r\n  customElements.define('module-switcher', ModuleSwitcher);\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport { HomeAssistant } from '../../types/types';\r\nimport Song from '../../types/Song';\r\nimport './TrackDisplay';\r\nimport './MediaControl';\r\nimport './ModuleSwitcher';\r\nimport DCPConfig from '../../types/Config';\r\nimport Module from '../../types/Module';\r\n\r\nexport function getSongFromSpotify(hass: HomeAssistant, config: DCPConfig): Song {\r\n  if (!config.spotify_name) {\r\n    console.log('ERROR: No spotify_name passed in as argument');\r\n    return null;\r\n  }\r\n\r\n  const spotifyState = hass.states[config.spotify_name];\r\n\r\n  if (!spotifyState) {\r\n    // We need to show this to the user somehow\r\n    console.log('ERROR: no state');\r\n    return null;\r\n  }\r\n\r\n  const attr = spotifyState.attributes;\r\n\r\n  return {\r\n    title: attr.media_title,\r\n    artistName: attr.media_artist,\r\n    albumArt: attr.entity_picture,\r\n    isPlaying: spotifyState.state === 'playing',\r\n  };\r\n}\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class BottomRow extends LitElement {\r\n  @property({ type: Object }) public hass: HomeAssistant;\r\n  @property({ type: Object }) public config: DCPConfig;\r\n  @property({ type: Object }) public currentModule: Module\r\n  @property({ type: Array }) public modules: Module[]\r\n\r\n  protected render(): TemplateResult {\r\n    const song = getSongFromSpotify(this.hass, this.config);\r\n\r\n    return html`\r\n      <div id=\"bottom-row\">\r\n        <track-display .song=${song}></track-display>\r\n        <media-control\r\n          .hass=${this.hass}\r\n          .song=${song}\r\n          .mediaPlayerId=${this.config.spotify_name}>\r\n        </media-control>\r\n        <module-switcher .modules=${this.modules} .currentModule=${this.currentModule}>\r\n        </module-switcher>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #bottom-row {\r\n        display: grid;\r\n        grid-template-columns: 32% 36% 32%;\r\n        grid-template-rows: 100%;\r\n        height: calc(100% - 16px);\r\n        padding: 8px 0;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('bottom-row')) {\r\n  customElements.define('bottom-row', BottomRow);\r\n}\r\n","import {\r\n  css, html, TemplateResult,\r\n} from 'lit-element';\r\n\r\n// Reference: https://stackoverflow.com/a/61453050/\r\n// We probably need to get this type from somewhere\r\n/**\r\n * Creates a slider\r\n * @param onSlide Function to be updated on every slide update\r\n * @param onChange Function that's called only when the user is done sliding\r\n * @param startVal The start value of the slider\r\n * @param min Minimum value of the slider\r\n * @param max Maximum value of the slider\r\n * @param additionalClass Additional class to add to the slider container. Namely used\r\n *  for changing the track color of the slider (e.g. for the temperature slider)\r\n * @returns TemplateResult (html) of the slider\r\n */\r\nexport default function createSlider(\r\n  onSlide: (value: number) => void, onChange: (value: number) => void, startVal: number, min = 0,\r\n  max = 100, additionalClass: string = null,\r\n): TemplateResult {\r\n  const callOnSlider = (event: Event) => {\r\n    const valueStr = (<HTMLInputElement>event.target).value;\r\n    // convert value to an int\r\n    const value = Number.parseInt(valueStr, 10);\r\n\r\n    if (onSlide) {\r\n      onSlide(value);\r\n    }\r\n  };\r\n\r\n  const callOnChange = (event: Event) => {\r\n    const valueStr = (<HTMLInputElement>event.target).value;\r\n    // convert value to an int\r\n    const value = Number.parseInt(valueStr, 10);\r\n\r\n    if (onChange) {\r\n      onChange(value);\r\n    }\r\n  };\r\n\r\n  // https://stackoverflow.com/a/58095358/\r\n  const styles = css`\r\n    .slider {\r\n      -webkit-appearance: none;\r\n      /* TODO: This width does *not* scale well, but it's really wack since vh isn't working */\r\n      width: min(30vw, 74vh);\r\n      height: 12px; /* width of the track */\r\n      border-radius: 25px;\r\n      background: #d3d3d3;\r\n      outline: none;\r\n      opacity: 0.7;\r\n\r\n      margin-left: -50%;\r\n  }\r\n\r\n  .slider::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n\r\n    width: 36px;\r\n    height: 36px;\r\n\r\n    background: #fff;\r\n    border-radius: 50%;\r\n    border: 2px solid currentColor;\r\n\r\n    /* cursor: pointer; */\r\n  }\r\n\r\n  .element-to-rotate {\r\n    display: block;\r\n    transform-origin: top left;\r\n    /* transition: opacity .2s; */\r\n    /* -webkit-transition: .2s; */\r\n    transform: rotate(-90deg);\r\n    /* Note: for a CLOCKWISE rotation, use the commented-out\r\n          transform instead of this one. */\r\n    /* transform: rotate(-90deg) translate(-100%); */\r\n    /* transform: rotate(90deg) translate(0, -100%); */\r\n    margin-top: -50%;\r\n    /* Not vital, but possibly a good idea if the element you're rotating contains\r\n          text and you want a single long vertical line of text and the pre-rotation\r\n          width of your element is small enough that the text wraps: */\r\n    white-space: nowrap;\r\n  }\r\n\r\n  /* TODO: This doesn't seem to do anything and idk why */\r\n  .slider-container { /* Centers it */\r\n    width: 0;\r\n    margin-left: 25%;\r\n  }\r\n  `;\r\n\r\n  const oldStyles = css`\r\n    .slider {\r\n      /* background: #d3d3d3; */\r\n      outline: none;\r\n      transition: opacity .2s;\r\n      /* appearance: slider-vertical; */\r\n      /* width: 0; */\r\n      /* height: 100%; */\r\n      /* transform: rotateZ(270deg); */\r\n      margin-bottom: 100px;\r\n      transform: rotate(-90deg);\r\n      -moz-transform: rotate(-90deg);\r\n      /* transform-origin: center left; */\r\n    }\r\n\r\n    input[type=range] {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n    }\r\n\r\n    /*.slider::-webkit-slider-thumb {*/\r\n    input[type=range]::-webkit-slider-thumb {\r\n      width: 100px;\r\n      height: 100px;\r\n      border-radius: 300px;\r\n      background-color: red !important;\r\n      background: orange;\r\n      color: orange;\r\n    }\r\n\r\n    input[type=range]::-moz-range-thumb {\r\n      width: 30px;\r\n      height: 30px;\r\n      border-radius: 15px;\r\n      background: red !important;\r\n      color: yellow;\r\n    }\r\n    \r\n    input[type=range]::-webkit-slider-runnable-track {\r\n      width: 30px;\r\n      height: 30px; /* actually width */\r\n      cursor: pointer;\r\n      box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n      background: green;\r\n    }\r\n\r\n    input[type=range]:focus::-webkit-slider-runnable-track {\r\n    }\r\n\r\n    /*\r\n    input[type=range]::-moz-range-track {\r\n      width: 100%;\r\n      cursor: pointer;\r\n      box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n      background: green;\r\n    }\r\n    */\r\n\r\n    /*\r\n    input[type=range]::-ms-track {\r\n      width: 100%;\r\n      height: 8.4px;\r\n      cursor: pointer;\r\n      background: transparent;\r\n      border-color: transparent;\r\n      border-width: 16px 0;\r\n      color: transparent;\r\n    }\r\n    input[type=range]::-ms-fill-lower {\r\n      background: #2a6495;\r\n      border: 0.2px solid #010101;\r\n      border-radius: 2.6px;\r\n      box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n    }\r\n    input[type=range]:focus::-ms-fill-lower {\r\n      background: #3071a9;\r\n    }\r\n    input[type=range]::-ms-fill-upper {\r\n      background: #3071a9;\r\n      border: 0.2px solid #010101;\r\n      border-radius: 2.6px;\r\n      box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;\r\n    }\r\n    input[type=range]:focus::-ms-fill-upper {\r\n      background: #367ebd;\r\n    }\r\n    */\r\n  `;\r\n\r\n  const classes = additionalClass ? `slider-container ${additionalClass}` : 'slider-container';\r\n\r\n  return html`\r\n    <!-- <div class=\"${classes}\"> -->\r\n    <div class=\"slider-container ${additionalClass}\">\r\n      <style>\r\n        ${styles}\r\n      </style>\r\n      <input\r\n        type=\"range\"\r\n        orient=\"vertical\"\r\n        class=\"slider element-to-rotate\"\r\n        @input=${callOnSlider}\r\n        @change=${callOnChange}\r\n        value=${startVal}\r\n        min=${min}\r\n        max=${max}\r\n      >\r\n      </input>\r\n    </div>\r\n  `;\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport Light from '../../../types/Light';\r\nimport createSlider from '../../Slider';\r\nimport icon from '../../res/light-bulb.png';\r\nimport createImageButton from '../../ImageButton';\r\n\r\n/**\r\n * Displays a single light, with multiple sliders (one for brigttness, one for color temp or hue)\r\n * Note that while the slider's value updates on slide, the state changes are only actually sent\r\n * to the light when you release the slider.\r\n */\r\nexport default class LightSlider extends LitElement {\r\n  @property({ type: Object }) public light: Light;\r\n  @property({ type: Function }) public toggleLight: (lightID: string) => void;\r\n  @property({ type: Function }) public setLightState: (\r\n    lightID: string, state: Record<string, unknown>,\r\n  ) => void;\r\n\r\n  protected render(): TemplateResult {\r\n    /**\r\n     * Convert the value from [0, 100] to [0, 255] and update the value so its rendered on screen\r\n    */\r\n    const onBrightnessSlide = (value: number) => {\r\n      const shifted = (value / 100) * 255;\r\n      this.light = { ...this.light, brightness: shifted };\r\n    };\r\n\r\n    /**\r\n     * Update the value (through onBrightnessSlide) and call the according service.\r\n     * Only called once we're done dragging to prevent overloading the light.\r\n     */\r\n    const onBrightnessChange = (value: number) => {\r\n      onBrightnessSlide(value);\r\n      this.setLightState(this.light.entityId, {\r\n        brightness_pct: value, entity_id: this.light.entityId,\r\n      });\r\n    };\r\n\r\n    /**\r\n     *  Update the value so it's rendered on the screen\r\n     */\r\n    const onTempSlide = (value: number) => {\r\n      this.light = { ...this.light, colorTemp: value };\r\n    };\r\n\r\n    /**\r\n     *  Update the value of the slider (through onTempSlide) and call the according service\r\n     *  Only called once we're done dragging to prevent overloading the light.\r\n     */\r\n    const onTempChange = (value: number) => {\r\n      onTempSlide(value);\r\n      this.setLightState(this.light.entityId, {\r\n        color_temp: value, entity_id: this.light.entityId,\r\n      });\r\n    };\r\n\r\n    const onPowerClick = () => {\r\n      this.toggleLight(this.light.entityId);\r\n    };\r\n\r\n    // Normalize brightness from [0, 255] to [0, 100]\r\n    const brightness = (this.light.brightness / 255) * 100;\r\n\r\n    const brightnessValue = brightness ? `${brightness.toFixed(0)}%` : 'Off';\r\n    const temperatureValue = this.light.colorTemp ? `${this.light.colorTemp}K` : 'Off';\r\n\r\n    return html`\r\n      <div class=\"smart-light-slider-container\">\r\n        <div class=\"multi-light-slider-container\">\r\n          <div class=\"light-slider-container\">\r\n            ${createSlider(onBrightnessSlide, onBrightnessChange, brightness, 1, 100)}\r\n\r\n            <div class=\"slider-info-container\">\r\n              <span class=\"brightness-value\">\r\n                ${brightnessValue}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"light-slider-container\">\r\n            <!-- TODO: Note that we do minMireds + 1 - otherwise, it will throw an error for some reason -->\r\n            ${createSlider(onTempSlide, onTempChange, this.light.colorTemp, this.light.minMireds + 1, this.light.maxMireds, 'temperature-slider-container')}\r\n\r\n            <div class=\"slider-info-container\">\r\n              <span class=\"brightness-value\">\r\n                ${temperatureValue}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"power-button-container\">\r\n          ${createImageButton(onPowerClick, icon, 'power-button')}\r\n        </div>\r\n        <div class=\"light-name-container\">\r\n          <span class=\"light-name\">\r\n            ${this.light.name}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  // TODO: See if we can get some of these from elsewhere? slider-info-container should be common\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      .smart-light-slider-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        /* TODO: Check this */\r\n        max-width: 15rem;\r\n        height: 100%;\r\n        margin-left: 16px;\r\n      }\r\n\r\n      .multi-light-slider-container {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        height: 100%;\r\n      }\r\n\r\n      .slider-info-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-right: 6px;\r\n      }\r\n\r\n      .brightness-value {\r\n        min-width: 34px; /* So the text doesn't shift when it goes to 1 digit */\r\n        text-align: right;\r\n      }\r\n\r\n      .light-slider-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: flex-end;\r\n      }\r\n\r\n      .slider-container {\r\n        width: 0;\r\n        margin-left: -25%;\r\n      }\r\n\r\n      .power-button-container {\r\n        display: flex;\r\n        justify-content: center;\r\n      }\r\n\r\n      .light-name-container {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n\r\n      .light-name {\r\n        display: inline-block;\r\n        flex-grow: 0;\r\n      }\r\n\r\n      #power-button {\r\n        width: 32px;\r\n        height: 32px;\r\n      }\r\n\r\n      .temperature-slider-container > .slider {\r\n        background-image: -webkit-linear-gradient( right, rgb(255, 160, 0) 0%, white 50%, rgb(166, 209, 255) 100% );\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('light-slider')) {\r\n  customElements.define('light-slider', LightSlider);\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport Light from '../../../types/Light';\r\nimport { HomeAssistant } from '../../../types/types';\r\nimport './LightSlider';\r\n\r\n/*\r\nfunction setLightState(hass: HomeAssistant, state: Record<string, unknown>): void {\r\n  hass.callService('light', 'turn_on', { ...state });\r\n}\r\n*/\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class LightControl extends LitElement {\r\n  @property({ type: Object }) public hass: HomeAssistant;\r\n  @property({ type: Array }) public lights: Light[];\r\n\r\n  protected render(): TemplateResult {\r\n    const setLightState = (lightID: string, state: Record<string, unknown>) => {\r\n      this.hass.callService('light', 'turn_on', { ...state, entity_id: lightID });\r\n    };\r\n\r\n    const toggleLight = (lightID: string) => {\r\n      this.hass.callService('light', 'toggle', { entity_id: lightID });\r\n    };\r\n\r\n    const rows = this.lights.map((light) => html`\r\n      <!-- Spread & recreate light so it will always re-render (hopefully) -->\r\n      <light-slider\r\n        .light=${{ ...light }}\r\n        .setLightState=${setLightState}\r\n        .toggleLight=${toggleLight}\r\n        class=\"light-slider-margin\">\r\n      </light-slider>\r\n    `);\r\n\r\n    return html`\r\n      <div id=\"light-control\">\r\n        ${rows}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #light-control {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        width: calc(100% - 8px);\r\n        height: calc(100% - 8px);\r\n        overflow-x: auto;\r\n        overflow-y: hidden;\r\n        margin: 4px 0;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('light-control')) {\r\n  customElements.define('light-control', LightControl);\r\n}\r\n","import { html, TemplateResult } from 'lit-element';\r\nimport Module from '../../../types/Module';\r\nimport { HomeAssistant } from '../../../types/types';\r\nimport Light from '../../../types/Light';\r\nimport './LightControl';\r\n\r\nimport icon from '../../res/light-bulb.png';\r\nimport DCPConfig from '../../../types/Config';\r\n\r\nexport default class LightControlModule implements Module {\r\n  icon: string;\r\n  name: string;\r\n  component: (hass: HomeAssistant, config: DCPConfig) => TemplateResult;\r\n  index: number;\r\n  active: boolean;\r\n\r\n  constructor() {\r\n    this.name = 'Light Control';\r\n    this.icon = icon;\r\n    this.active = true; // This will change\r\n    this.component = (hass: HomeAssistant, config: DCPConfig): TemplateResult => {\r\n      const lightsConfig = config.lights;\r\n\r\n      const lightNamesPriorityMap = new Map<string, number>();\r\n      lightsConfig.forEach((conf) => lightNamesPriorityMap.set(conf.name, conf.priority));\r\n\r\n      const lights: Light[] = lightsConfig.map(\r\n        (lightConfig) => hass.states[lightConfig.name],\r\n      ).map((light) => {\r\n        const {\r\n          // eslint-disable-next-line camelcase\r\n          brightness, color_temp, friendly_name, min_mireds, max_mireds,\r\n        } = light.attributes;\r\n        const entityId = light.entity_id;\r\n\r\n        // Get the sort priority from the configuration\r\n        const priority = lightNamesPriorityMap.get(entityId) ?? 0;\r\n\r\n        // TODO: Check supported features here, probably\r\n\r\n        return {\r\n          name: friendly_name,\r\n          colorTemp: color_temp,\r\n          isOn: light.state === 'on',\r\n          minMireds: min_mireds,\r\n          maxMireds: max_mireds,\r\n          brightness,\r\n          entityId,\r\n          priority,\r\n        };\r\n      });\r\n\r\n      // Sort the lights based on priority, descending\r\n      lights.sort((a, b) => b.priority - a.priority);\r\n\r\n      return html`\r\n        <light-control .hass=${hass} .lights=${lights}></light-control>\r\n      `;\r\n    };\r\n  }\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport PCStatData from '../../../types/PCStats';\r\n\r\n// TODO: In the future, in the spirit of HA, should make this module so we can just pass in any\r\n// { stat-name, value } pair and have it generate some form of display for it\r\n\r\n// Could show graphs?\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class PCStats extends LitElement {\r\n//   @property({type: Object }) public hass: Hass;\r\n  @property({ type: Object }) public stats: PCStatData;\r\n\r\n  protected render(): TemplateResult {\r\n    if (!this.stats) {\r\n      return html`\r\n        <div class=\"unavailable-text\">\r\n          PC Stat data not provided.\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    const format = (num: number) => {\r\n      if (num) {\r\n        return num.toFixed(0);\r\n      }\r\n\r\n      return -1;\r\n    };\r\n\r\n    // TODO: Format these depending on what unit we're using\r\n    const conv = new Map<string, string>(Object.entries({\r\n      'CPU Temp': `${format(this.stats.cpuTemp)}°C`,\r\n      'GPU Temp': `${format(this.stats.gpuTemp)}°C`,\r\n      'CPU Usage': `${format(this.stats.cpuUsage)}%`,\r\n      'Memory Usage': `${format(this.stats.memoryUsage)}%`,\r\n    }));\r\n\r\n    const rows: TemplateResult[] = [];\r\n    conv.forEach((val, key) => {\r\n      rows.push(html`\r\n        <div class=\"stat-row\">\r\n          <span>${key}:</span>\r\n          <!-- TODO: Check for non-percentage values? -->\r\n          <span>${val}</span>\r\n        </div>\r\n      `);\r\n    });\r\n\r\n    return html`\r\n      <div id=\"pc-stats\">\r\n        ${rows}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #pc-stats {\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding: 8px 8px;\r\n      }\r\n\r\n      .stat-row {\r\n        font-size: 24px;\r\n        padding-bottom: 8px;\r\n      }\r\n\r\n      .unavailable-text {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100%;\r\n        font-size: 20px;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('pc-stats')) {\r\n  customElements.define('pc-stats', PCStats);\r\n}\r\n","import { html, TemplateResult } from 'lit-element';\r\nimport Module from '../../../types/Module';\r\nimport { HomeAssistant } from '../../../types/types';\r\nimport './PCStats';\r\n\r\nimport icon from '../../res/dial.png';\r\nimport PCStatData from '../../../types/PCStats';\r\nimport DCPConfig, { PCStatsConfig } from '../../../types/Config';\r\n\r\nfunction fahrenheitToCelcius(fahrenheit: number): number {\r\n  return (fahrenheit - 32) / 1.8;\r\n}\r\n\r\n/**\r\n * Attempts to parse the state for a given  into a float only if it exists\r\n * @param id the id\r\n * @returns the float of the PC Stat or null\r\n */\r\nfunction parseStatsFloat(\r\n  hass: HomeAssistant, statsConfig: PCStatsConfig, id: string,\r\n): number | null {\r\n  const entityId = statsConfig[id];\r\n\r\n  const entity = hass.states[entityId];\r\n  if (entity) {\r\n    return parseFloat(entity.state);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// TODO: Make this able to given any type of stat, not just the categories we provide.\r\nexport default class PCStatsModule implements Module {\r\n  icon: string;\r\n  name: string;\r\n  component: (hass: HomeAssistant, config: DCPConfig) => TemplateResult;\r\n  index: number;\r\n  active: boolean;\r\n\r\n  constructor() {\r\n    this.name = 'Spotify';\r\n    this.icon = icon;\r\n    this.active = true; // This will change\r\n    this.component = (hass: HomeAssistant, config: DCPConfig): TemplateResult => {\r\n      let pcData: PCStatData = null;\r\n      const statsConfig = config.pc_stats;\r\n\r\n      // Assumes we're in fahrenheit (bad assumption)\r\n\r\n      if (statsConfig) {\r\n        pcData = {\r\n          gpuTemp: fahrenheitToCelcius(parseStatsFloat(hass, statsConfig, 'gpu_temp')),\r\n          cpuTemp: fahrenheitToCelcius(parseStatsFloat(hass, statsConfig, 'cpu_temp')),\r\n          cpuUsage: parseStatsFloat(hass, statsConfig, 'cpu_usage'),\r\n          gpuUsage: parseStatsFloat(hass, statsConfig, 'gpu_usage'),\r\n          memoryUsage: parseStatsFloat(hass, statsConfig, 'memory_usage'),\r\n        };\r\n      }\r\n\r\n      return html`<pc-stats .stats=${pcData}></pc-stats>`;\r\n    };\r\n  }\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport RaspberryPi from '../../../types/RaspberryPi';\r\nimport { HomeAssistant } from '../../../types/types';\r\nimport createSlider from '../../Slider';\r\nimport themeColor from '../../theme';\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class TabletControlView extends LitElement {\r\n  @property({ type: Array }) public hass: HomeAssistant;\r\n  @property({ type: Object }) public raspberryPi: RaspberryPi;\r\n\r\n  protected render(): TemplateResult {\r\n    const onChange = (brightness: number) => {\r\n      // call a service to change the volume\r\n      this.hass.callService('rpi_backlight', 'set_brightness', { brightness });\r\n\r\n      // \"remake\" the property, which forces a re-render\r\n      this.raspberryPi = { ...this.raspberryPi, brightness };\r\n    };\r\n\r\n    const setScreenPower = () => {\r\n      this.hass.callService('rpi_backlight', 'set_power', { power: !this.raspberryPi.power });\r\n\r\n      // \"remake\" the property, which forces a re-render\r\n      // Really only need this so we don't have to wait until we call update on the Pi again\r\n      this.raspberryPi = { ...this.raspberryPi, power: !this.raspberryPi.power };\r\n    };\r\n\r\n    const shutdown = () => {\r\n      this.hass.callService('rpi_backlight', 'shutdown', {});\r\n    };\r\n\r\n    if (!this.raspberryPi\r\n        || this.raspberryPi.brightness === null\r\n        || this.raspberryPi.power === null\r\n    ) {\r\n      return html`\r\n        <div class=\"invalid-entry\">\r\n          RaspberryPi is not active or is configured incorrectly.\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <div id=\"tablet-control\">\r\n        <div class=\"brightness-slider-container\">\r\n          ${createSlider(onChange, null, this.raspberryPi.brightness, 4, 100, null)}\r\n          <span class=\"slider-label\">\r\n            ${this.raspberryPi.brightness}%\r\n          </span>\r\n        </div>\r\n\r\n        <div>\r\n          <ha-icon-button @click=${shutdown} icon=\"mdi:power\" class=\"sleep-button\">\r\n          </ha-icon-button>\r\n          <ha-icon-button @click=${setScreenPower} icon=\"mdi:sleep\" class=\"power-button\">\r\n          </ha-icon-button>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult[] {\r\n    const styles = css`\r\n      #tablet-control {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        width: 100%;\r\n        height: calc(100% - 4px);\r\n        overflow-x: auto;\r\n        overflow-y: hidden;\r\n        margin-bottom: 2px;\r\n      }\r\n\r\n      .invalid-entry {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 20px;\r\n        height: 100%;\r\n      }\r\n\r\n      .sleep-button, .power-button {\r\n        --mdc-icon-size: 48px;\r\n        --mdc-icon-button-size: 56px;\r\n        color: var(--theme-color);\r\n      }\r\n\r\n      .brightness-slider-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: flex-end;\r\n        height: 100%;\r\n      }\r\n\r\n      /* Override styles from the slider */\r\n      .slider-container {\r\n        padding: -40% 0;\r\n        width: 0;\r\n        margin-left: -25%;\r\n      }\r\n    `;\r\n\r\n    return [themeColor, styles];\r\n  }\r\n}\r\n\r\nif (!customElements.get('tablet-control')) {\r\n  customElements.define('tablet-control', TabletControlView);\r\n}\r\n","import { html, TemplateResult } from 'lit-element';\r\nimport Module from '../../../types/Module';\r\nimport { HomeAssistant } from '../../../types/types';\r\nimport './TabletControlView';\r\n\r\nimport icon from '../../res/settings.png';\r\nimport DCPConfig from '../../../types/Config';\r\nimport RaspberryPi from '../../../types/RaspberryPi';\r\n\r\nexport default class TabletControlModule implements Module {\r\n  icon: string;\r\n  name: string;\r\n  component: (hass: HomeAssistant, config: DCPConfig) => TemplateResult;\r\n  active: boolean;\r\n\r\n  constructor() {\r\n    this.name = 'Volume Mixer';\r\n    this.icon = icon;\r\n    this.active = true; // This will change\r\n    this.component = (hass: HomeAssistant, config: DCPConfig): TemplateResult => {\r\n      const piBrightnessName = config.pi_brightness_name;\r\n      const piPowerName = config.pi_power_name;\r\n\r\n      const pi: RaspberryPi = { power: null, brightness: null };\r\n\r\n      if (piBrightnessName) {\r\n        const brightnessState = hass.states[piBrightnessName];\r\n        if (typeof brightnessState !== 'undefined' && brightnessState.state !== 'unavailable') {\r\n          pi.brightness = parseInt(brightnessState.state, 10);\r\n        }\r\n      }\r\n\r\n      if (piPowerName) {\r\n        const powerState = hass.states[piPowerName];\r\n        if (typeof powerState !== 'undefined' && powerState.state !== 'unavailable') {\r\n          pi.power = powerState.state === 'True';\r\n        }\r\n      }\r\n\r\n      return html`\r\n        <tablet-control .hass=${hass} .raspberryPi=${pi}>\r\n        </tablet-control>\r\n      `;\r\n    };\r\n  }\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport VolumeProcess from '../../../types/VolumeProcess';\r\nimport createSlider from '../../Slider';\r\n// We probably need to get this type from somewhere\r\nexport default class VolumeSlider extends LitElement {\r\n  @property({ type: Object }) public volumeProcess: VolumeProcess;\r\n  @property({ type: Function }) public setVolume: (pid: number, value: number) => void;\r\n\r\n  protected render(): TemplateResult {\r\n    if (!this.volumeProcess) {\r\n      return html`<div> empty </div>`;\r\n    }\r\n\r\n    const onChange = (value: number) => {\r\n      // call a service to change the volume\r\n      this.setVolume(this.volumeProcess.pid, value);\r\n\r\n      // \"Remake\" the volumeProcess property, which forces a re-render\r\n      this.volumeProcess = { ...this.volumeProcess, volume: value };\r\n    };\r\n\r\n    const url = `/local/icons/${this.volumeProcess.name}.png`;\r\n    return html`\r\n      <div class=\"volume-slider-container\">\r\n        ${createSlider(onChange, null, this.volumeProcess.volume, 0, 100, 'override')}\r\n        <span class=\"slider-label\">\r\n          ${this.volumeProcess.volume}%\r\n        </span>\r\n        <img src=${url} class=\"slider-icon\"></img>\r\n        <span class=\"process-name-text\">\r\n          ${this.volumeProcess.name}\r\n          <!-- ${this.volumeProcess.name.charAt(0) === 'D' ? 'askldfjghkasjodlhgfghsdaf' : null} -->\r\n        </span>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      .volume-slider-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: flex-end;\r\n        height: 100%;\r\n        margin-left: 16px;\r\n      }\r\n\r\n      /* Should probably make this always be stuck at the bottom no matter what, but this will work\r\n        since we're using a fixed screen size\r\n      */\r\n      .slider-info-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n      }\r\n\r\n      .slider-icon {\r\n        width: 32px;\r\n        height: 32px;\r\n        position: relative;\r\n      }\r\n\r\n      .slider-label {\r\n        padding-left: 5px;\r\n        min-width: 34px; /* So the text doesn't shift when it changes digits */\r\n      }\r\n\r\n      /* Override styles from the slider */\r\n      .slider-container {\r\n        padding: -40% 0;\r\n        width: 0;\r\n        margin-left: -25%;\r\n      }\r\n\r\n      .process-name-text {\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        max-width: 6rem;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('volume-slider')) {\r\n  customElements.define('volume-slider', VolumeSlider);\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport { HomeAssistant } from '../../../types/types';\r\nimport VolumeProcess from '../../../types/VolumeProcess';\r\nimport './VolumeSlider';\r\n\r\n// We probably need to get this type from somewhere\r\nexport default class VolumeMixer extends LitElement {\r\n  @property({ type: Array }) public hass: HomeAssistant;\r\n  @property({ type: Array }) public volumeProcesses: VolumeProcess[];\r\n\r\n  protected render(): TemplateResult {\r\n    const setVolume = (pid: number, volume: number) => {\r\n      this.hass.callService('desktop_processes', 'set_process_volume', { pid, volume });\r\n    };\r\n\r\n    if (!this.volumeProcesses) {\r\n      return html`\r\n        <div class=\"invalid-entry\">\r\n          desktop_name was either not passed or is invalid.\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    const sortedProcs = this.volumeProcesses.sort((a, b) => {\r\n      if (a.priority === b.priority) {\r\n        return a.name.localeCompare(b.name); // ascending (alphabetical)\r\n      }\r\n\r\n      return b.priority - a.priority;\r\n    });\r\n\r\n    const sliders: TemplateResult[] = sortedProcs.map((proc: VolumeProcess) => html`\r\n      <volume-slider .volumeProcess=${proc} class=\"volume-slider\" .setVolume=${setVolume} />\r\n      <volume-slider>\r\n    `);\r\n\r\n    return html`\r\n      <div id=\"volume-mixer\">\r\n        ${sliders}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      #volume-mixer {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        width: calc(100% - 20px);\r\n        height: calc(100% - 4px);\r\n        overflow-x: auto;\r\n        overflow-y: hidden;\r\n        margin-bottom: 2px;\r\n      }\r\n\r\n      .invalid-entry {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 20px;\r\n        height: 100%;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('volume-mixer')) {\r\n  customElements.define('volume-mixer', VolumeMixer);\r\n}\r\n","import { html, TemplateResult } from 'lit-element';\r\nimport Module from '../../../types/Module';\r\nimport { HomeAssistant } from '../../../types/types';\r\nimport './VolumeMixer';\r\n\r\nimport icon from '../../res/levels-adjustment.png';\r\nimport VolumeProcess from '../../../types/VolumeProcess';\r\nimport DCPConfig from '../../../types/Config';\r\n\r\nexport default class VolumeMixerModule implements Module {\r\n  icon: string;\r\n  name: string;\r\n  component: (hass: HomeAssistant, config: DCPConfig) => TemplateResult;\r\n  active: boolean;\r\n\r\n  constructor() {\r\n    this.name = 'Volume Mixer';\r\n    this.icon = icon;\r\n    this.active = true; // This will change\r\n    this.component = (hass: HomeAssistant, config: DCPConfig): TemplateResult => {\r\n      const desktopName: string = config.desktop_name;\r\n\r\n      let procs: VolumeProcess[] = null;\r\n\r\n      if (desktopName && hass.states[desktopName]) {\r\n        procs = hass.states[desktopName].attributes.processes;\r\n      }\r\n\r\n      return html`\r\n        <volume-mixer .hass=${hass} .volumeProcesses=${procs}></volume-mixer>\r\n      `;\r\n    };\r\n  }\r\n}\r\n","import LightControlModule from '../src/modules/LightControl/LightControlModule';\r\nimport PCStatsModule from '../src/modules/PCStats/PCStatsModule';\r\nimport TabletControlModule from '../src/modules/TabletControl/TabletControlModule';\r\nimport VolumeMixerModule from '../src/modules/VolumeMixer/VolumeMixerModule';\r\nimport Module from './Module';\r\n\r\nexport default function getModules(modulesIn: string[]): Module[] {\r\n  const vm = new VolumeMixerModule();\r\n  const lc = new LightControlModule();\r\n  const pc = new PCStatsModule();\r\n  const tablet = new TabletControlModule();\r\n\r\n  const mapped = new Map(Object.entries({\r\n    volume_mixer: vm,\r\n    light_control: lc,\r\n    pc_stats: pc,\r\n    tablet,\r\n  }));\r\n\r\n  // TODO: Add filtering of modules we don't want\r\n  const modules = modulesIn.map((moduleStr) => {\r\n    const module = mapped.get(moduleStr);\r\n\r\n    if (!module) {\r\n      console.error(`${moduleStr} not in module map!`);\r\n      return null;\r\n    }\r\n\r\n    return module;\r\n  }).filter((val) => val); // Filter out falsy values (null)\r\n\r\n  return modules;\r\n}\r\n","import {\r\n  css, CSSResult, html, LitElement, TemplateResult, property,\r\n} from 'lit-element';\r\nimport { HomeAssistant } from '../types/types';\r\nimport './TopRow/TopRow';\r\nimport './MiddleRow/MiddleRow';\r\nimport './BottomRow/BottomRow';\r\nimport { BaseConfig } from '../types/Config';\r\nimport Module from '../types/Module';\r\nimport getModules from '../types/ModulesManager';\r\n\r\nexport default class App extends LitElement {\r\n  @property({ type: Object }) public hass: HomeAssistant;\r\n  @property({ type: Boolean }) public narrow: boolean;\r\n  @property({ type: Object }) public panel: BaseConfig;\r\n\r\n  @property({ type: Array }) public modules: Module[];\r\n  @property({ type: Object }) public currentModule: Module = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.addEventListener('update-current-module', this.handleUpdateCurrentModule);\r\n  }\r\n\r\n  private handleUpdateCurrentModule(event: CustomEvent): void {\r\n    const { detail } = event;\r\n\r\n    if (!detail.module) {\r\n      throw Error('did not receive module in current-module CustomEvent');\r\n    }\r\n\r\n    this.currentModule = detail.module;\r\n  }\r\n\r\n  protected render(): TemplateResult {\r\n    if (!this.modules) {\r\n      this.modules = getModules(this.panel.config.modules);\r\n      [this.currentModule = null] = this.modules;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"grid-container\">\r\n        <top-row .hass=${this.hass} .config=${this.panel.config}></top-row>\r\n        <middle-row\r\n          .hass=${this.hass}\r\n          .currentModule=${this.currentModule}\r\n          .config=${this.panel.config}\r\n          id=\"middle-row\">\r\n        </middle-row>\r\n        <bottom-row\r\n          .hass=${this.hass}\r\n          .config=${this.panel.config}\r\n          .modules=${this.modules}\r\n          .currentModule=${this.currentModule}\r\n        >\r\n        </bottom-row>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static get styles(): CSSResult {\r\n    return css`\r\n      .grid-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        width: calc(100% - 1.5% * 2);\r\n        padding-left: 1.5%;\r\n        justify-content: space-around;\r\n      }\r\n\r\n      #middle-row {\r\n        flex-grow: 1;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('desktop-control')) {\r\n  customElements.define('desktop-control', App);\r\n}\r\n"]}